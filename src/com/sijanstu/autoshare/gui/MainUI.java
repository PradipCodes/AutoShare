package com.sijanstu.autoshare.gui;

import com.sijanstu.autoshare.Config;
import com.sijanstu.autoshare.apply.Automation;
import com.sijanstu.autoshare.browser.Chromium;
import com.sijanstu.autoshare.entity.Company;
import com.sijanstu.autoshare.entity.User;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Sijan
 */
public final class MainUI extends javax.swing.JFrame {

    static List<Company> companiesList;
    static File file = new File(Config.PROPERIES_PATH);

    /**
     * Creates new form NewJFrame
     */
    public MainUI() {
        initComponents();
        getUsers();
        compBox.removeAllItems();
        applyPanel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rSButtonMaterialIconShadow1 = new RSMaterialComponent.RSButtonMaterialIconShadow();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        userbox = new rojerusan.RSComboBox();
        rSButtonRound3 = new rojeru_san.rsbutton.RSButtonRound();
        rSButtonRound4 = new rojeru_san.rsbutton.RSButtonRound();
        ipocheck = new rojeru_san.rsbutton.RSButtonRound();
        applyPanel = new javax.swing.JPanel();
        verify = new rojeru_san.rsbutton.RSButtonRound();
        apply = new rojeru_san.rsbutton.RSButtonRound();
        kitta = new RSMaterialComponent.RSTextFieldMaterial();
        compBox = new rojerusan.RSComboBox();
        isbatch = new rojerusan.RSCheckBox();
        jLabel2 = new javax.swing.JLabel();
        showBox = new rojerusan.RSCheckBox();

        rSButtonMaterialIconShadow1.setText("rSButtonMaterialIconShadow1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 153));
        jLabel1.setText("Auto Share");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 2, 160, 40));

        userbox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select User" }));
        jPanel1.add(userbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 410, -1));

        rSButtonRound3.setText("Manage Users");
        rSButtonRound3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonRound3ActionPerformed(evt);
            }
        });
        jPanel1.add(rSButtonRound3, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 10, 130, 34));

        rSButtonRound4.setText("Refresh Users");
        rSButtonRound4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonRound4ActionPerformed(evt);
            }
        });
        jPanel1.add(rSButtonRound4, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 50, 130, 34));

        ipocheck.setText("Check Available IPOs");
        ipocheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipocheckActionPerformed(evt);
            }
        });
        jPanel1.add(ipocheck, new org.netbeans.lib.awtextra.AbsoluteConstraints(114, 128, -1, 34));

        applyPanel.setBackground(new java.awt.Color(255, 255, 255));
        applyPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        verify.setText("Verify");
        verify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyActionPerformed(evt);
            }
        });
        applyPanel.add(verify, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 110, 120, 34));

        apply.setText("Apply");
        apply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyActionPerformed(evt);
            }
        });
        applyPanel.add(apply, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 110, 120, 34));

        kitta.setPlaceholder("Number of Kitta to Apply");
        applyPanel.add(kitta, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 50, 179, -1));

        applyPanel.add(compBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 414, -1));

        isbatch.setText("All User");
        applyPanel.add(isbatch, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 90, 50));

        jPanel1.add(applyPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, 440, 150));

        jLabel2.setText("Please wait for 30 seconds to get any errors");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 330, 240, -1));

        showBox.setSelected(true);
        showBox.setText("Show me everything");
        jPanel1.add(showBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 210, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void rSButtonRound3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonRound3ActionPerformed
        UserList.main();

    }//GEN-LAST:event_rSButtonRound3ActionPerformed
    void applyForUser(User user) throws Exception {
        String response = (String) Automation.applyIPO(user, compBox.getSelectedIndex() + 1, false, false);
        JOptionPane.showMessageDialog(this, response);
        JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout());
        ImageIcon image = new ImageIcon(Automation.page.screenshot());
        image.setImage(image.getImage().getScaledInstance(900, 500, Image.SCALE_SMOOTH));
        JLabel label = new JLabel(image);
        Chromium.playwright.close();
        panel1.add(label, BorderLayout.CENTER);
        JOptionPane.showMessageDialog(this, panel1);
    }
    private void applyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyActionPerformed
        try {
            if (file.exists()) {
                Properties p = new Properties();
                User user;
                p.load(new FileReader(file));
                if (isbatch.isSelected()) {
                    int i = 1;
                    while (true) {
                        String userNumber = "user" + i;
                        if (p.containsKey(userNumber + ".username")) {
                            user = new User();
                            user.setUsername(p.getProperty(userNumber + ".username"));
                            user.setPassword(p.getProperty(userNumber + ".password"));
                            user.setCRN(p.getProperty(userNumber + ".crn"));
                            user.setPIN(p.getProperty(userNumber + ".pin"));
                            user.setKitta(kitta.getText());
                            user.setSecurity(p.getProperty(userNumber + ".dp"));
                            applyForUser(user);
                            i++;
                        } else {
                            break;
                        }
                    }
                } else {
                    user = new User();
                    String userKey = userbox.getSelectedItem().toString().split("[.]")[0];
                    user.setUsername(p.getProperty(userKey + ".username"));
                    user.setPassword(p.getProperty(userKey + ".password"));
                    user.setCRN(p.getProperty(userKey + ".crn"));
                    user.setPIN(p.getProperty(userKey + ".pin"));
                    user.setKitta(kitta.getText());
                    user.setSecurity(p.getProperty(userKey + ".dp"));
                    applyForUser(user);
                }

            }
        } catch (Exception ex) {
            Chromium.playwright.close();
            JOptionPane.showMessageDialog(this, "Error in applying IPO:\n" + ex.getMessage());
        }


    }//GEN-LAST:event_applyActionPerformed

    private void rSButtonRound4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonRound4ActionPerformed
        getUsers();
    }//GEN-LAST:event_rSButtonRound4ActionPerformed

    private void ipocheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipocheckActionPerformed
        if (file.exists()) {
            try {
                Properties p = new Properties();
                User user = new User();
                p.load(new FileReader(file));
                String userKey = userbox.getSelectedItem().toString().split("[.]")[0];
                user.setUsername(p.getProperty(userKey + ".username"));
                user.setPassword(p.getProperty(userKey + ".password"));
                user.setCRN(p.getProperty(userKey + ".crn"));
                user.setPIN(p.getProperty(userKey + ".pin"));
                user.setKitta(kitta.getText());
                user.setSecurity(p.getProperty(userKey + ".dp"));
                int companyIndex = compBox.getSelectedIndex() + 1;
                System.out.println("selected" + companyIndex);
                Object response = (Object) Automation.applyIPO(user, companyIndex, true, false);
                if (response instanceof String) {
                    JOptionPane.showMessageDialog(this, response);
                } else {
                    companiesList = (List<Company>) response;
                    if (companiesList.isEmpty()) {
                        Chromium.playwright.close();
                        JOptionPane.showMessageDialog(this, "No IPOs available");
                    } else {
                        compBox.removeAllItems();
                        for (Company company : companiesList) {
                            compBox.addItem(company.getName());
                        }
                        Chromium.playwright.close();
                        JOptionPane.showMessageDialog(this, "select company to apply IPO");
                        applyPanel.setVisible(true);

                    }

                }
            } catch (IOException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception e) {
                Chromium.playwright.close();
                JOptionPane.showMessageDialog(this, e.getMessage());

            }
        }
    }//GEN-LAST:event_ipocheckActionPerformed

    private void verifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyActionPerformed
        if (file.exists()) {
            try {
                Properties p = new Properties();
                User user = new User();
                p.load(new FileReader(file));
                String userKey = userbox.getSelectedItem().toString().split("[.]")[0];
                user.setUsername(p.getProperty(userKey + ".username"));
                user.setPassword(p.getProperty(userKey + ".password"));
                user.setCRN(p.getProperty(userKey + ".crn"));
                user.setPIN(p.getProperty(userKey + ".pin"));
                user.setKitta(kitta.getText());
                user.setSecurity(p.getProperty(userKey + ".dp"));
                int companyIndex = compBox.getSelectedIndex() + 1;
                System.out.println("selected" + companyIndex);
                Object response = (Object) Automation.applyIPO(user, companyIndex, true, true);
                JPanel panel = new JPanel();
                panel.setLayout(new BorderLayout());
                Automation.page.waitForLoadState();
                ImageIcon image = new ImageIcon(Automation.page.screenshot());
                image.setImage(image.getImage().getScaledInstance(900, 500, Image.SCALE_SMOOTH));
                JLabel label = new JLabel(image);
                Chromium.playwright.close();
                panel.add(label, BorderLayout.CENTER);
                JOptionPane.showMessageDialog(this, panel);

            } catch (IOException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception e) {
                Chromium.playwright.close();
                JOptionPane.showMessageDialog(this, e.getMessage());

            }
        }
    }//GEN-LAST:event_verifyActionPerformed
    void getUsers() {
        userbox.removeAllItems();
        if (file.exists()) {
            try {
                Properties p = new Properties();
                p.load(new FileReader(file));
                int i = 1;
                while (true) {
                    String userNumber = "user" + i;
                    if (p.containsKey(userNumber + ".username")) {
                        userbox.addItem(userNumber + "." + p.getProperty(userNumber + ".username"));
                        i++;
                    } else {
                        break;
                    }
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(UserList.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(UserList.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    public static void mainUI() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private rojeru_san.rsbutton.RSButtonRound apply;
    private javax.swing.JPanel applyPanel;
    private rojerusan.RSComboBox compBox;
    private rojeru_san.rsbutton.RSButtonRound ipocheck;
    public static rojerusan.RSCheckBox isbatch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private RSMaterialComponent.RSTextFieldMaterial kitta;
    private RSMaterialComponent.RSButtonMaterialIconShadow rSButtonMaterialIconShadow1;
    private rojeru_san.rsbutton.RSButtonRound rSButtonRound3;
    private rojeru_san.rsbutton.RSButtonRound rSButtonRound4;
    public static rojerusan.RSCheckBox showBox;
    private rojerusan.RSComboBox userbox;
    private rojeru_san.rsbutton.RSButtonRound verify;
    // End of variables declaration//GEN-END:variables
}
